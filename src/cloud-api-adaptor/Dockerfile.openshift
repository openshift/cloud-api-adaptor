# This Dockerfile is a copy of the upstream one, customized for Openshift builds
# We're commenting out everything not necessary for our build, so that it's
# easy to diff and sync with upstream changes.
# The parameters for the build comes from a separate file in the .tekton folder.
# For a local build, use:
# $ podman build --build-arg-file ../../.tekton/caa-build-args.env .. -f Dockerfile.openshift
#
# Note on base images: we can't use variables in the "FROM" line of our Dockerfiles,
# because we need to be able to track down what is used to build our containers,
# and the automation we use to log that can't rely on variables.
# Also, having the URL harcoded here allows Mintmaker to make update PRs when
# our image can be updated.
#
############

ARG BUILD_TYPE=dev
ARG BUILDER_BASE=quay.io/confidential-containers/golang-fedora:1.22.11-40
ARG BASE=registry.fedoraproject.org/fedora:40

# This dockerfile uses Go cross-compilation to build the binary,
# we build on the host platform ($BUILDPLATFORM) and then copy the
# binary into the container image of the target platform ($TARGETPLATFORM)
# that was specified with --platform. For more details see:
# https://www.docker.com/blog/faster-multi-platform-builds-dockerfile-cross-compilation-guide/
FROM brew.registry.redhat.io/rh-osbs/openshift-golang-builder:rhel_9_golang_1.23 AS builder-release
# openshift-golang-builder: GOFLAGS is set to "-mod=vendor" by default in our builder image.
# We need to disable that to keep the build running.
ENV GOFLAGS=""
ARG YQ_VERSION
RUN go install github.com/mikefarah/yq/v4@$YQ_VERSION

# This registers RHEL when building on an unsubscribed system
# If you are running a UBI container on a registered and subscribed RHEL host,
# the main RHEL Server repository is enabled inside the standard UBI container.
#RUN if command -v subscription-manager; then \
#        REPO_ARCH=$(uname -m) && \
#        subscription-manager register --org "$(cat /activation-key/org)" --activationkey "$(cat /activation-key/activationkey)" && \
#        subscription-manager repos --enable rhel-9-for-${REPO_ARCH}-appstream-rpms --enable codeready-builder-for-rhel-9-${REPO_ARCH}-rpms; \
#    else \
#        dnf -y install 'dnf-command(config-manager)' && dnf config-manager --enable crb; \
#    fi

# For `dev` builds due to CGO constraints we have to emulate the target platform
# instead of using Go's cross-compilation
#FROM --platform=$TARGETPLATFORM $BUILDER_BASE AS builder-dev
#ARG YQ_VERSION
#RUN go install github.com/mikefarah/yq/v4@$YQ_VERSION
RUN dnf install -y libvirt-devel && dnf clean all

FROM builder-${BUILD_TYPE} AS builder
ARG RELEASE_BUILD
ARG COMMIT
ARG VERSION
ARG TARGETARCH

WORKDIR /work
COPY cloud-api-adaptor/go.mod cloud-api-adaptor/go.sum ./cloud-api-adaptor/
COPY cloud-providers ./cloud-providers
COPY peerpod-ctrl ./peerpod-ctrl
WORKDIR /work/cloud-api-adaptor
RUN go mod download
COPY cloud-api-adaptor/entrypoint.sh cloud-api-adaptor/Makefile cloud-api-adaptor/Makefile.defaults cloud-api-adaptor/versions.yaml ./
COPY cloud-api-adaptor/hack  ./hack
COPY cloud-api-adaptor/cmd   ./cmd
COPY cloud-api-adaptor/pkg   ./pkg
COPY cloud-api-adaptor/proto ./proto

# Set the desired cloud providers for our downstream build (not upsream default)
ENV BUILTIN_CLOUD_PROVIDERS="strictfipsruntime aws azure ibmcloud vsphere libvirt gcp"
# Make sure the PATH is set appropriately - our builder image being different, the upstream scripts fail otherwise
ENV PATH=$GOPATH/bin:$PATH
RUN CC=gcc make ARCH=$TARGETARCH COMMIT=$COMMIT VERSION=$VERSION RELEASE_BUILD=$RELEASE_BUILD cloud-api-adaptor

# FROM builder-release AS iptables

ARG TARGETARCH

# Downstream change: our target image (RHEL/ubi9) doesn't use iptables, but nftables.
# We don't need all those things in our image.
# WORKDIR /iptables
# RUN --mount=type=bind,target=/versions.yaml,source=cloud-api-adaptor/versions.yaml,readonly \
#     version=$(yq -r .tools.iptables-wrapper /versions.yaml) && \
#     GOARCH=$TARGETARCH go install "github.com/kubernetes-sigs/iptables-wrappers@$version" && \
#     shopt -s globstar && \
#     cp /go/bin/**/iptables-wrappers ./iptables-wrapper && \
#     curl -L -o iptables-wrapper-installer.sh "https://raw.githubusercontent.com/kubernetes-sigs/iptables-wrappers/${version#v*-*-}/iptables-wrapper-installer.sh" && \
#     chmod 755 iptables-wrapper-installer.sh

FROM registry.access.redhat.com/ubi9/ubi:9.5-1739751568 AS base-release
USER root
#RUN if command -v subscription-manager; then \
#        REPO_ARCH=$(uname -m) && \
#        subscription-manager register --org "$(cat /activation-key/org)" --activationkey "$(cat /activation-key/activationkey)" && \
#        subscription-manager repos --enable rhel-9-for-${REPO_ARCH}-appstream-rpms --enable codeready-builder-for-rhel-9-${REPO_ARCH}-rpms; \
#    else \
#        dnf -y install 'dnf-command(config-manager)' && dnf config-manager --enable crb; \
#    fi

RUN dnf install -y iptables-nft nftables && dnf clean all
# RUN --mount=type=cache,target=/iptables,from=iptables,source=/iptables,readonly \
#     cd /iptables && ./iptables-wrapper-installer.sh --no-sanity-check --no-cleanup

#FROM base-release AS base-dev
RUN dnf install -y libvirt-libs /usr/bin/ssh && dnf clean all

FROM base-${BUILD_TYPE}
COPY --from=builder /work/cloud-api-adaptor/cloud-api-adaptor /work/cloud-api-adaptor/entrypoint.sh /usr/local/bin/

# Red Hat labels
LABEL name="openshift-sandboxed-containers-operator-cloud-api-adaptor" \
version="1.9.0" \
com.redhat.component="osc-cloud-api-adaptor-container" \
summary="osc-cloud-api-adaptor provides the ability to create Kata PODs using cloud provider APIs" \
maintainer="redhat@redhat.com" \
description="osc-cloud-api-adaptor provides the ability to create Kata PODs using cloud provider APIs" \
io.k8s.display-name="openshift-sandboxed-containers-cloud-api-adaptor" \
io.k8s.description="osc-cloud-api-adaptor provides the ability to create Kata PODs using cloud provider APIs" \
io.openshift.tags=""

CMD ["entrypoint.sh"]
